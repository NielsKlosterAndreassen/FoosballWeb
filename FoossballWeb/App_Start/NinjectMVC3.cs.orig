using EventSourcingTest;
using EventSourcingTest.Interfaces;
using FoossballPlayars.CommandContext;
using FoossballPlayars.Events;
using FoossballPlayars.QueryContext;
using FoossballPlayars.Services;
using FoossballWeb.Controllers;
using RavenPersistance;

[assembly: WebActivator.PreApplicationStartMethod(typeof(FoossballWeb.App_Start.NinjectMVC3), "Start")]
[assembly: WebActivator.ApplicationShutdownMethodAttribute(typeof(FoossballWeb.App_Start.NinjectMVC3), "Stop")]

namespace FoossballWeb.App_Start
{
    using Microsoft.Web.Infrastructure.DynamicModuleHelper;
    using Ninject;
    using Ninject.Web.Mvc;

    public static class NinjectMVC3 
    {
        private static readonly Bootstrapper Bootstrapper = new Bootstrapper();

        /// <summary>
        /// Starts the application
        /// </summary>
        public static void Start() 
        {
            DynamicModuleUtility.RegisterModule(typeof(OnePerRequestModule));
            DynamicModuleUtility.RegisterModule(typeof(HttpApplicationInitializationModule));
            Bootstrapper.Initialize(CreateKernel);

        }
        
        /// <summary>
        /// Stops the application.
        /// </summary>
        public static void Stop()
        {
            Bootstrapper.ShutDown();
        }
        
        /// <summary>
        /// Creates the kernel that will manage your application.
        /// </summary>
        /// <returns>The created kernel.</returns>
        private static IKernel CreateKernel()
        {
            var kernel = new StandardKernel();
            RegisterServices(kernel);
            return kernel;
        }

        /// <summary>
        /// Load your modules or register your services here!
        /// </summary>
        /// <param name="kernel">The kernel.</param>
        private static void RegisterServices(IKernel kernel)
        {
            var scoreCalculator = new SimpleScoreCalculator();
            AbstractScoreCalculator.Calculator = scoreCalculator;
            var scoreQuery = new ScoreQuery(new WebSignaler());
            DomainBus.EventBus.RegisterHanlder(() => new GameHandler(scoreQuery, scoreCalculator));
            kernel.Bind<IScoreQuery>().ToConstant(scoreQuery);
<<<<<<< local
            var eventStorage = new RaventEventStorage(new ServerStoreFactory("http://nka:8080"));
=======
            var eventStorage = new RaventEventStorage(new ServerStoreFactory("http://localhost:8081"));
>>>>>>> other
            var sessionFactory = new SessionFactory(eventStorage);
            kernel.Bind<IEventStorage>().ToConstant(eventStorage);
            kernel.Bind<ISessionFactory>().ToConstant(sessionFactory);
            var gameService = new GameService(sessionFactory, scoreCalculator);
            DomainBus.CommandBus.RegisterHanlder(()=> gameService);
        	kernel.Bind<IStatisticsService>().To<StatisticsService>().InSingletonScope();
        }        
    }
}
